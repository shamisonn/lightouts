{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["boxSize","window","innerWidth","innerHeight","statusLights","i","j","Math","floor","random","Box","props","mesh","useRef","ref","attach","args","color","MatrixBox","useState","state","setState","preIdx","idxes","map","flat","lists","xyz","active","y","parseInt","x","N","console","log","push","onClick","e","index","forEach","add","xs","join","clickBox","key","position","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uKAWA,I,oEAHMA,EAAUC,OAAOC,WAAaD,OAAOE,YAAc,EAAI,GAEvDC,EAAe,GACZC,EAAI,EAAGA,EANN,EAMaA,IAAK,CACxBD,EAAaC,GAAK,GAClB,IAAK,IAAIC,EAAI,EAAGA,EARV,EAQiBA,IAAKF,EAAaC,GAAGC,GAAKC,KAAKC,MAAoB,EAAdD,KAAKE,UAqBrE,SAASC,EAAIC,GACT,IAAMC,EAAOC,mBAEb,OACI,0CACQF,EADR,CAEIG,IAAKF,IACD,uCAAmBG,OAAO,WAAWC,KAAM,CAAChB,EAASA,EAASA,KAC9D,0CAAsBe,OAAO,WAAWE,MAAON,EAAMM,SAKrE,SAASC,EAAUP,GACFE,mBAAb,IADsB,EAGIM,mBAASR,GAHb,mBAGfS,EAHe,KAGRC,EAHQ,KAMhBC,EAAS,EAAE,GAAGtB,EAAQA,EAAQ,GAAI,EAAGA,EAAQA,EAAQ,GAErDuB,EAAQD,EAAOE,KAAI,SAAAnB,GAAM,OAAOiB,EAAOE,KAAI,SAAAlB,GAAM,MAAO,CAACD,EAAGC,EAAG,SAASmB,OAExEC,EAAQ,GAVQ,WAYdC,GAEJ,IA7CUC,EA6CNC,EAAIC,SAASP,EAAMI,GAAK,IAAI3B,EAAQA,EAAQ,GAAG,GAC/C+B,EAAKC,EAAKF,SAASP,EAAMI,GAAK,IAAI3B,EAAQA,EAAQ,GAAG,GAEzDiC,QAAQC,IAAIH,EAAEF,GAEdH,EAAMS,KACF,kBAACzB,EAAD,CACI0B,QAAS,SAACC,IA/C1B,SAAkBC,GACd,IAAMT,EAAIS,EAAM,GACVP,EAAIO,EAAM,GAChBlC,EAAa2B,GAAGF,GAA2B,GAArBzB,EAAa2B,GAAGF,GAEtC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,IAAIU,SAAQ,SAACC,GAC9B,GAAGA,EAAI,GAAGT,GAAKS,EAAI,GAAGT,EAtBvB,GAsB8B,GAAGS,EAAI,GAAGX,GAAKW,EAAI,GAAGX,EAtBpD,IAuBEzB,EAAaoC,EAAI,GAAGT,GAAGS,EAAI,GAAGX,GAAyC,GAAnCzB,EAAaoC,EAAI,GAAGT,GAAGS,EAAI,GAAGX,OAG1EI,QAAQC,IAAI9B,EAAaoB,KAAI,SAAAiB,GAAO,OAAOA,EAAGC,KAAK,SAAQA,KAAK,OAsChDC,CAAS,CAACd,EAAEE,IACZV,EAAS,2BAAID,GAAL,IAAYQ,OAAQxB,MAEhCwC,IAAKjB,EACLkB,SAAUtB,EAAMI,GAChBV,OA1DEW,EA0DcR,EAAMQ,OAAOG,GAAGF,GAzDxCD,EAAe,aACZ,qBAyCP,IAAI,IAAID,KAAOJ,EAAQ,EAAfI,GAoBR,OACI,8BAAOD,GAIfR,EAAU4B,aAAe,CACrBlB,OAAQxB,GAaG2C,MAVf,WACE,OACE,kBAAC,IAAD,KACI,uCACA,gCAAYF,SAAU,CAAC,IAAK,IAAK,OACjC,kBAAC3B,EAAD,QCjFY8B,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.3f82decd.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\n\n// import './App.css';\n\nconst N = 3;\n\n// TODO FIXME N=3 only\nconst boxSize = window.innerWidth > window.innerHeight ? 1 : 0.5;\n\nconst statusLights = [];\nfor (let i = 0; i < N; i++) {\n    statusLights[i] = [];\n    for (let j = 0; j < N; j++) statusLights[i][j] = Math.floor(Math.random()*2);\n}\n\nfunction colorDef(active) {\n    if (active) return \"darkorange\";\n    return \"darkslateblue\";\n}\n\nfunction clickBox(index) {\n    const y = index[0],\n          x = index[1];\n    statusLights[x][y] = ~statusLights[x][y] & 1;\n\n    [[1,0],[0,1],[-1,0],[0,-1]].forEach((add) => {\n        if(0<=add[0]+x && add[0]+x<N && 0<=add[1]+y && add[1]+y<N) {\n            statusLights[add[0]+x][add[1]+y] = ~statusLights[add[0]+x][add[1]+y] & 1;\n        }\n    });\n    console.log(statusLights.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n}\n\nfunction Box(props) {\n    const mesh = useRef();\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh} >\n                <boxBufferGeometry attach=\"geometry\" args={[boxSize, boxSize, boxSize]} />\n                <meshStandardMaterial attach=\"material\" color={props.color} />\n        </mesh>\n    );\n}\n\nfunction MatrixBox(props) {\n    const mesh = useRef();\n\n    const [state, setState] = useState(props);\n\n    // TODO FIXME N=3 only\n    const preIdx = [-1*(boxSize+boxSize/2), 0, boxSize+boxSize/2];\n\n    const idxes = preIdx.map(i => {return preIdx.map(j => {return [i, j, 0] }) }).flat();\n\n    const lists = [];\n\n    for(let xyz in idxes) {\n        // TODO FIXME N=3 only\n        let y = parseInt(idxes[xyz][0]/(boxSize+boxSize/2)+1),\n            x = (N-1)-parseInt(idxes[xyz][1]/(boxSize+boxSize/2)+1);\n\n        console.log(x,y)\n\n        lists.push(\n            <Box\n                onClick={(e) => {\n                    clickBox([y,x]);\n                    setState({...state, active: statusLights});\n                } }\n                key={xyz}\n                position={idxes[xyz]}\n                color={colorDef(state.active[x][y])}\n            />\n        );\n    }\n\n    return (\n        <mesh>{lists}</mesh>\n    );\n}\n\nMatrixBox.defaultProps = {\n    active: statusLights\n}\n\nfunction App() {\n  return (\n    <Canvas>\n        <ambientLight />\n        <pointLight position={[100, 100, 100]} />\n        <MatrixBox />\n    </Canvas>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}