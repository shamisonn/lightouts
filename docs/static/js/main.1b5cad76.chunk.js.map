{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","boxSize","window","innerWidth","innerHeight","statusLights","i","j","Math","floor","random","mapLights","N","console","log","map","xs","join","toIdt","JSON","parse","stringify","idt_mtrx","mapLightsInv","Box","props","mesh","useRef","ref","attach","args","color","MatrixBox","useState","state","setState","preIdx","idxes","flat","lists","xyz","active","y","parseInt","x","push","onClick","e","index","forEach","add","clickBox","key","position","defaultProps","CameraController","useThree","camera","gl","useEffect","controls","domElement","minDistance","maxDistance","dispose","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b5cad76.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { Canvas, extend, useThree } from 'react-three-fiber';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nextend({ OrbitControls });\n\n// import './App.css';\n\nconst N = 3;\n\n// TODO FIXME N=3 only\nconst boxSize = window.innerWidth > window.innerHeight ? 1 : 0.5;\n\nconst statusLights = [];\nfor (let i = 0; i < N; i++) {\n    statusLights[i] = [];\n    for (let j = 0; j < N; j++) statusLights[i][j] = Math.floor(Math.random()*2);\n}\n\nconst mapLights = [];\nfor (let i = 0; i < N*N; i++) {\n    mapLights[i] = [];\n    for (let j = 0; j < N*N; j++) {\n        if (\n            i === j ||\n            (0 <= i-1 && i-1 === j && j%N!==N-1) ||\n            (i+1 < N*N && i+1 === j && j%N!==0) ||\n            (0 <= i-N && i-N === j) ||\n            (i+N <= N*N && i+N === j)\n        ) {\n            mapLights[i][j] = 1;\n        } else {\n            mapLights[i][j] = 0;\n        }\n    } \n}\n\nconsole.log(mapLights.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n\nconst toIdt = JSON.parse(JSON.stringify(mapLights));\n\nconsole.log(toIdt.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n\nconst idt_mtrx = [];\nfor (let i = 0; i < N*N; i++) {\n    idt_mtrx[i] = [];\n    for (let j = 0; j < N*N; j++) {\n        if (i===j) { idt_mtrx[i][j] = 1; }\n        else { idt_mtrx[i][j] = 0; }\n    }\n}\n\nconst mapLightsInv = JSON.parse(JSON.stringify(idt_mtrx));\n\nconsole.log(mapLightsInv.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n\nfunction isIdt_mtrx(mtrx) {\n    return !mtrx.some((row,idx1) => {\n        return row.some((j,idx2) => {\n            return (idx1===idx2&&!j) || (idx1!==idx2&&j);\n        });\n    });\n}\n\n// TODO\n// while (!isIdt_mtrx(toIdt)) {\n//     // toIdt | mapLightsInv\n//\n// }\n\nconsole.log(idt_mtrx.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n\nfunction colorDef(active) {\n    if (active) return \"darkorange\";\n    return \"darkslateblue\";\n}\n\nfunction clickBox(index) {\n    const y = index[0],\n          x = index[1];\n    statusLights[x][y] = ~statusLights[x][y] & 1;\n\n    [[1,0],[0,1],[-1,0],[0,-1]].forEach((add) => {\n        if(0<=add[0]+x && add[0]+x<N && 0<=add[1]+y && add[1]+y<N) {\n            statusLights[add[0]+x][add[1]+y] = ~statusLights[add[0]+x][add[1]+y] & 1;\n        }\n    });\n    console.log(statusLights.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n}\n\nfunction Box(props) {\n    const mesh = useRef();\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh} >\n                <boxBufferGeometry attach=\"geometry\" args={[boxSize, boxSize, boxSize]} />\n                <meshStandardMaterial attach=\"material\" color={props.color} />\n        </mesh>\n    );\n}\n\nfunction MatrixBox(props) {\n    const mesh = useRef();\n\n    const [state, setState] = useState(props);\n\n    // TODO FIXME N=3 only\n    const preIdx = [-1*(boxSize+boxSize/2), 0, boxSize+boxSize/2];\n\n    const idxes = preIdx.map(i => {return preIdx.map(j => {return [i, j, 0] }) }).flat();\n\n    const lists = [];\n\n    for(let xyz in idxes) {\n        // TODO FIXME N=3 only\n        let y = parseInt(idxes[xyz][0]/(boxSize+boxSize/2)+1),\n            x = (N-1)-parseInt(idxes[xyz][1]/(boxSize+boxSize/2)+1);\n\n        lists.push(\n            <Box\n                onClick={(e) => {\n                    clickBox([y,x]);\n                    setState({...state, active: statusLights});\n                } }\n                key={xyz}\n                position={idxes[xyz]}\n                color={colorDef(state.active[x][y])}\n            />\n        );\n    }\n\n    return (\n        <mesh>{lists}</mesh>\n    );\n}\n\nMatrixBox.defaultProps = {\n    active: statusLights\n}\n\nconst CameraController = () => {\n    const { camera, gl } = useThree();\n    useEffect(\n        () => {\n            const controls = new OrbitControls(camera, gl.domElement);\n\n            controls.minDistance = 3;\n            controls.maxDistance = 20;\n            return () => {\n                controls.dispose();\n            };\n        },\n        [camera, gl]\n    );\n    return null;\n};\n\nfunction App() {\n    return (\n        <Canvas>\n            <CameraController />\n            <ambientLight />\n            <pointLight position={[10, 10, 10]} />\n            <MatrixBox />\n        </Canvas>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}