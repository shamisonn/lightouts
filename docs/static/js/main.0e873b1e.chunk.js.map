{"version":3,"sources":["modules/lightsout.ts","App.js","serviceWorker.js","index.js"],"names":["isProblemDifficult","n","isIdt_mtrx","mtrx","some","row","idx1","j","idx2","toShowAnsMap","state","toAnsMtrx","arr","dup","result","length","push","splice","eachSlice","map","i","idx","filter","extend","OrbitControls","boxSize","window","innerWidth","innerHeight","statusLights","Math","floor","random","fStatusLights","console","log","toIdt","mapLightsInv","kansei","pend","count","forEach","isOne","slice","includes","left","right","k","chIdx","indexOf","chLeft","chRight","JSON","parse","stringify","l","v","m","xs","join","warn","F2_Gauss_Jordan","mapLights","fMapLights","idt_mtrx","fIdt_mtrx","defaultAnsMap","ansMap","showAnsFlag","Box","props","mesh","useRef","y","parseInt","position","x","N","useFrame","current","rotation","ref","attach","args","color","MatrixBox","useState","setState","preIdx","idxes","flat","lists","xyz","active","onClick","e","index","add","clickBox","answer","key","defaultProps","CameraController","useThree","camera","gl","cameraDistance","useEffect","controls","domElement","set","minDistance","maxDistance","dispose","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e873b1e.chunk.js","sourcesContent":["/*************************************************************************************\n//     _     _       _     _    ___        _       ____        _                \n//    | |   (_) __ _| |__ | |_ / _ \\ _   _| |_ ___/ ___|  ___ | |_   _____ _ __ \n//    | |   | |/ _` | '_ \\| __| | | | | | | __/ __\\___ \\ / _ \\| \\ \\ / / _ \\ '__|\n//    | |___| | (_| | | | | |_| |_| | |_| | |_\\__ \\___) | (_) | |\\ V /  __/ |   \n//    |_____|_|\\__, |_| |_|\\__|\\___/ \\__,_|\\__|___/____/ \\___/|_| \\_/ \\___|_|   \n//             |___/                                                            \n//\n//    Refarence:\n//\n//   - https://ja.wikipedia.org/wiki/%E9%9A%A3%E6%8E%A5%E8%A1%8C%E5%88%97\n//   - https://www.gensu.co.jp/saito/puzzle/a38lightsout1.html\n//   - http://www.math.okayama-u.ac.jp/~mi/lecture/pdf/galois.pdf\n//\n//\n//   Depend on a Theory of Algebra\n//\n//   - F_2 Field: {1,0} only\n//\n//    (+)| 0 | 1      (*)| 0 | 1 \n//   -------------   -------------\n//     0 | 0 | 1       0 | 0 | 0  \n//   -------------   -------------\n//     1 | 1 | 0       1 | 0 | 1  \n//\n//\n//    Provided by Zodiac-G12\n//\n*************************************************************************************/\n\n// Nが15より大きいと配列サイズ・計算量的に困難になる（ブラウザという方法論に於いてのみに限る主張）\nexport const isProblemDifficult = (n : number) : boolean => {\n    return n > 15;\n}\n\n\n// ライトの初期値をランダムに決めて出力する\nexport const fStatusLights = (n : number) : number[][] => {\n    const statusLights = [];\n    for (let i = 0; i < n; i++) {\n        statusLights[i] = [];\n        for (let j = 0; j < n; j++) {\n            (statusLights[i][j] as number) = Math.floor(Math.random()*2);\n        }\n    }\n    return statusLights;\n}\n\n\n// 拡大隣接行列：つまりは各マスから各マスに、写像が対応するかに関する真偽値(binary)の、有効グラフの行列\n// を出力する\nexport const fMapLights = (n : number) : number[][] => {\n    const mapLights = [];\n    for (let i = 0; i < n*n; i++) {\n        mapLights[i] = [];\n        for (let j = 0; j < n*n; j++) {\n            if (\n                i === j || //あるマスにおける自分に対する写像\n                (0 <= i-1 && i-1 === j && j%n!==n-1) || //左側のマスに対する写像\n                (i+1 < n*n && i+1 === j && j%n!==0) || //右側のマスに対する写像\n                (0 <= i-n && i-n === j) || //下側のマスに対する写像\n                (i+n < n*n && i+n === j) //上側に対する写像\n            ) {\n                (mapLights[i][j] as number) = 1;\n            } else { //写像が存在しない時\n                (mapLights[i][j] as number) = 0;\n            }\n        }\n    }\n    return mapLights;\n}\n\n\n// (N*N) * (N*N) の単位行列を出力する\nexport const fIdt_mtrx = (n : number) : number[][] => {\n    const idt_mtrx = [];\n    for (let i = 0; i < n*n; i++) {\n        idt_mtrx[i] = [];\n        for (let j = 0; j < n*n; j++) {\n            if (i===j) { (idt_mtrx[i][j] as number) = 1; }\n            else { (idt_mtrx[i][j] as number) = 0; }\n        }\n    }\n    return idt_mtrx;\n}\n\n\n// 行列が単位行列か判定して真偽値を出力する\nexport const isIdt_mtrx = (mtrx : number[][]) : boolean => {\n    return !mtrx.some((row,idx1) => {\n        return row.some((j,idx2) => {\n            return (idx1===idx2 && j!==1) || (idx1!==idx2 && j!==0);\n        });\n    });\n}\n\n\n// F2体上ににおいて、ある行列の逆行列を出力する\nexport const F2_Gauss_Jordan = (n : number, toIdt : number[][], mapLightsInv : number[][]) : boolean|number[][] => {\n\n    const kansei : boolean[] = [];\n    const pend : boolean[] = [];\n\n    for(let i = 0; i < n*n; i++) {\n        kansei[i] = false;\n        pend[i] = false;\n    }\n\n    let count = 0;\n    while (!isIdt_mtrx(toIdt) && count++ <= n) {\n        for (let i = 0; i < n*n; i++) {\n            toIdt[i].forEach((isOne, idx) => {\n                // (i,i) 以外で\"1\"になっている箇所について処理 (i,idx)\n                if (!(i === idx || !isOne)) {\n                    for (let j = 0; j < n*n; j++) {\n                        // (j,0) ~ (j,idx-1) が全て\"0\"で (j,idx) が\"1\"\n                        if (!( i===j ||\n                            toIdt[j].slice(0,idx).includes(1) ||\n                                toIdt[j][idx]!==1 )) {\n\n                            let left = toIdt[j],\n                                right = mapLightsInv[j];\n\n                            for (let k = 0; k < n*n; k++) {\n                                toIdt[i][k] = (toIdt[i][k] + left[k])&1;\n                                mapLightsInv[i][k] = (mapLightsInv[i][k] + right[k])&1;\n                            }\n                            if (!(kansei[i] || toIdt[i].filter(k=>k===1).length!==1)) {\n                                kansei[i] = true;\n                                let chIdx = toIdt[i].indexOf(1);\n                                let chLeft = toIdt[i],\n                                    chRight = mapLightsInv[i];\n\n                                toIdt[i] = JSON.parse(JSON.stringify(toIdt[chIdx]));\n                                mapLightsInv[i] = JSON.parse(JSON.stringify(mapLightsInv[chIdx]));\n\n                                toIdt[chIdx] = JSON.parse(JSON.stringify(chLeft));\n                                mapLightsInv[chIdx] = JSON.parse(JSON.stringify(chRight));\n\n                                for (let k = 0; k < n*n; k++) {\n                                    if (k!==chIdx && toIdt[k][chIdx]===1) {\n                                        for (let l = 0; l < n*n; l++) {\n                                            toIdt[k][l] = (toIdt[k][l] + toIdt[chIdx][l])&1;\n                                            mapLightsInv[k][l] = (mapLightsInv[k][l] + mapLightsInv[chIdx][l])&1;\n                                        }\n                                    }\n                                    if (!kansei[k] && toIdt[k].filter(l=>l===1).length===1) {\n                                        pend[k] = true;\n                                    }\n                                }\n                                pend.forEach((v,m) => {\n                                    if (v) {\n                                        if (!(kansei[m] || toIdt[m].filter(k=>k===1).length!==1)) {\n                                            pend[m] = false;\n                                            kansei[m] = true;\n                                            let chIdx = toIdt[m].indexOf(1);      \n                                            let chLeft = toIdt[m],\n                                                chRight = mapLightsInv[m];\n\n                                            toIdt[m] = JSON.parse(JSON.stringify(toIdt[chIdx]));\n                                            mapLightsInv[m] = JSON.parse(JSON.stringify(mapLightsInv[chIdx]));\n\n                                            toIdt[chIdx] = JSON.parse(JSON.stringify(chLeft));\n                                            mapLightsInv[chIdx] = JSON.parse(JSON.stringify(chRight));\n\n                                            for (let k = 0; k < n*n; k++) {\n                                                if (!(k===chIdx || toIdt[k][chIdx]!==1)) {\n                                                    for (let l = 0; l < n*n; l++) {\n                                                        toIdt[k][l] = (toIdt[k][l] + toIdt[chIdx][l])&1;\n                                                        mapLightsInv[k][l] = (mapLightsInv[k][l] + mapLightsInv[chIdx][l])&1;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                })\n                                break;\n                            }\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n        // 逆行列が作れなかった\n    if (!isIdt_mtrx(toIdt)) {\n        console.warn(\"Inverse Matrix isnt EXIST!\");\n        return false;\n    }\n\n    console.log(count);\n    console.log(\"toIdt\", \"\\n\", toIdt.map(xs => {return xs.join(\", \")}).join(\"\\n\"), \"\\n\");\n    console.log(\"mapLightsInv\", \"\\n\", mapLightsInv.map(xs => {return xs.join(\", \")}).join(\"\\n\"), \"\\n\");\n    return mapLightsInv;\n}\n\n\nexport const eachSlice = (arr : number[], n : number = 2) : number[][] => {\n    let dup = [...arr];\n    let result = [];\n    let length = dup.length;\n\n    while (0 < length) {\n        result.push(dup.splice(0, n));\n        length = dup.length;\n    }\n\n    return result;\n};\n\n\n// 答のマップを返す \nexport const toShowAnsMap = (state : number[], toAnsMtrx : number[][], n : number) : number[][] => {\n    return eachSlice(toAnsMtrx.map(row => {\n        return row.map((i,idx) => {\n            return (i*state[idx]);\n        }).filter(i=>i===1).length&1;\n    }), n);\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\n\nimport { Canvas, extend, useThree, useFrame } from 'react-three-fiber';\nimport * as THREE from \"three\";\n\n// ⚠️  CAUTIONS!!!!\n// in :973 comment outed\n// vim ../node_modules/three/examples/jsm/controls/OrbitControls.js\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport { isProblemDifficult, fStatusLights, fMapLights, fIdt_mtrx, F2_Gauss_Jordan, toShowAnsMap } from './modules/lightsout';\n\n\nextend({ OrbitControls });\n\n\n////////////////////////////////////////////////////////////////////////////\n//                            パズルの定義\n////////////////////////////////////////////////////////////////////////////\n\nconst N = 3;\n\n// TODO FIXME N=3 only\nconst boxSize = window.innerWidth > window.innerHeight ? 100 : 100;\n\n// Light Outs ライトの初期値\nconst statusLights = fStatusLights(N);\n\n// この問題に関して、解が一意的に存在するか判定しやすいかの是非\nconsole.log(\n    isProblemDifficult(N) ? \"Difficult\" : \"Easy\"\n);\n\n// 拡大隣接行列->単位行列にする予定\nconst toIdt = fMapLights(N);\n\n// 単位行列->拡大隣接行列の逆行列にする予定\nconst mapLightsInv = fIdt_mtrx(N);\n\n// 拡大隣接行列の逆行列　存在しない時はnull\nconst toAnsMtrx = F2_Gauss_Jordan(N, toIdt, mapLightsInv);\n\n// 答の場所を示すライトの位置の初期値\nconst defaultAnsMap = [];\nfor (let i = 0; i < N; i++) {\n    defaultAnsMap[i] = [];\n    for (let j = 0; j < N; j++) defaultAnsMap[i][j] = 0;\n}\n\n// 答の場所を示すライトの位置\nlet ansMap = JSON.parse(JSON.stringify(defaultAnsMap));\n\nlet showAnsFlag = false;\n\n////////////////////////////////////////////////////////////////////////////\n\n\n// TODO コンポーネント分け\nfunction colorDef(active) {\n    if (active) return \"darkorange\";\n    return \"darkslateblue\";\n}\n\nfunction clickBox(index) {\n    const y = index[0],\n          x = index[1];\n    statusLights[x][y] = ~statusLights[x][y] & 1;\n\n    [[1,0],[0,1],[-1,0],[0,-1]].forEach((add) => {\n        if(0<=add[0]+x && add[0]+x<N && 0<=add[1]+y && add[1]+y<N) {\n            statusLights[add[0]+x][add[1]+y] = ~statusLights[add[0]+x][add[1]+y] & 1;\n        }\n    });\n\n    if (!isProblemDifficult(N) && toAnsMtrx) {\n        ansMap = toShowAnsMap(statusLights.flat(), toAnsMtrx, N);\n    }\n\n    console.log(statusLights.map(xs => {return xs.join(\", \")}).join(\"\\n\"));\n}\n\nfunction Box(props) {\n    const mesh = useRef();\n\n    let y = parseInt(props.position[0]/(boxSize+boxSize/2)+1),\n        x = (N-1)-parseInt(props.position[1]/(boxSize+boxSize/2)+1);\n\n    useFrame(() => {(showAnsFlag && ansMap[x][y]===1) ? mesh.current.rotation.y += 0.1 : mesh.current.rotation.y = 0 });\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh} >\n                <boxBufferGeometry attach=\"geometry\" args={[boxSize, boxSize, boxSize]} />\n                <meshStandardMaterial attach=\"material\" color={props.color} />\n        </mesh>\n    );\n}\n\nfunction MatrixBox(props) {\n    const mesh = useRef();\n\n    const [state, setState] = useState(props);\n\n    // TODO FIXME N=3 only\n    const preIdx = [-1*(boxSize+boxSize/2), 0, boxSize+boxSize/2];\n\n    const idxes = preIdx.map(i => {return preIdx.map(j => {return [i, j, 0] }) }).flat();\n\n    const lists = [];\n\n    for(let xyz in idxes) {\n        // TODO FIXME N=3 only\n        let y = parseInt(idxes[xyz][0]/(boxSize+boxSize/2)+1),\n            x = (N-1)-parseInt(idxes[xyz][1]/(boxSize+boxSize/2)+1);\n\n        lists.push(\n            <Box\n                onClick={(e) => {\n                    clickBox([y,x]);\n                    setState({...state, active: statusLights, answer: ansMap});\n                } }\n                key={xyz}\n                position={idxes[xyz]}\n                color={colorDef(state.active[x][y])}\n            />\n        );\n    }\n\n    return (\n        <mesh>{lists}</mesh>\n    );\n}\n\nMatrixBox.defaultProps = {\n    active: statusLights,\n    answer: ansMap\n}\n\nconst CameraController = () => {\n    const { camera, gl } = useThree();\n    const cameraDistance = window.innerWidth > window.innerHeight ? 500 : 700;\n    useEffect(\n        () => {\n            const controls = new OrbitControls(camera, gl.domElement);\n\n            camera.position.set(0, 0, cameraDistance);\n            controls.minDistance = 0;\n            controls.maxDistance = 1000;\n            return () => {\n                controls.dispose();\n            };\n        },\n        [camera, gl]\n    );\n    return null;\n};\n\nfunction App() {\n    return (\n        <div className=\"app-container\">\n            <button\n                onClick={(e) => { showAnsFlag = !showAnsFlag } }\n                className=\"ans-show-button\">SHOW ANSWER</button>\n            <Canvas>\n                <CameraController />\n                <ambientLight />\n                <pointLight position={[0, 0, 1000]} />\n                <MatrixBox />\n            </Canvas>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}